/*
 * YARA Rules Example for G3ICAP Antivirus Module
 * 
 * This file contains example YARA rules for detecting various types of malware
 * and threats. These rules can be used with the G3ICAP antivirus module.
 */

// Rule for detecting generic malware patterns
rule Malware_Generic {
    meta:
        description = "Generic malware detection rule"
        author = "G3ICAP Team"
        priority = 8
        threat_level = "high"
        category = "malware"
    
    strings:
        $malware_strings = {
            "malware", "virus", "trojan", "worm", "backdoor",
            "rootkit", "spyware", "adware", "ransomware"
        }
        
        $suspicious_patterns = {
            "cmd.exe", "powershell", "regsvr32", "rundll32",
            "wscript", "cscript", "certutil", "bitsadmin"
        }
    
    condition:
        2 of ($malware_strings) or 3 of ($suspicious_patterns)
}

// Rule for detecting phishing attempts
rule Phishing_Generic {
    meta:
        description = "Generic phishing detection rule"
        author = "G3ICAP Team"
        priority = 7
        threat_level = "medium"
        category = "phishing"
    
    strings:
        $phishing_strings = {
            "verify your account", "click here", "urgent action required",
            "suspended account", "security alert", "confirm your identity"
        }
        
        $suspicious_domains = {
            "paypal-security", "amazon-verification", "apple-support",
            "microsoft-security", "google-account"
        }
    
    condition:
        2 of ($phishing_strings) or 1 of ($suspicious_domains)
}

// Rule for detecting cryptocurrency mining malware
rule Crypto_Miner {
    meta:
        description = "Cryptocurrency mining malware detection"
        author = "G3ICAP Team"
        priority = 6
        threat_level = "medium"
        category = "cryptocurrency"
    
    strings:
        $mining_strings = {
            "mining", "cryptocurrency", "bitcoin", "ethereum",
            "monero", "cryptonight", "hashrate", "mining pool"
        }
        
        $mining_pools = {
            "pool.bitcoin.com", "stratum+tcp", "mining.bitcoin.com",
            "eth.2miners.com", "monero.hashvault.pro"
        }
    
    condition:
        2 of ($mining_strings) or 1 of ($mining_pools)
}

// Rule for detecting ransomware
rule Ransomware_Generic {
    meta:
        description = "Generic ransomware detection rule"
        author = "G3ICAP Team"
        priority = 9
        threat_level = "critical"
        category = "ransomware"
    
    strings:
        $ransomware_strings = {
            "your files have been encrypted", "pay the ransom",
            "decrypt your files", "bitcoin payment", "tor browser",
            "restore your files", "encryption key"
        }
        
        $file_extensions = {
            ".encrypted", ".locked", ".crypto", ".crypt",
            ".enc", ".locked", ".cryptolocker"
        }
    
    condition:
        2 of ($ransomware_strings) or 1 of ($file_extensions)
}

// Rule for detecting suspicious PowerShell usage
rule PowerShell_Suspicious {
    meta:
        description = "Suspicious PowerShell usage detection"
        author = "G3ICAP Team"
        priority = 5
        threat_level = "medium"
        category = "powershell"
    
    strings:
        $powershell_cmd = "powershell.exe"
        $suspicious_commands = {
            "Invoke-Expression", "IEX", "DownloadString",
            "WebClient", "System.Net.WebClient",
            "bypass", "hidden", "windowstyle hidden"
        }
        
        $encoded_strings = {
            "base64", "encoded", "utf8", "ascii"
        }
    
    condition:
        $powershell_cmd and (2 of ($suspicious_commands) or 1 of ($encoded_strings))
}

// Rule for detecting fileless malware
rule Fileless_Malware {
    meta:
        description = "Fileless malware detection rule"
        author = "G3ICAP Team"
        priority = 8
        threat_level = "high"
        category = "fileless"
    
    strings:
        $fileless_indicators = {
            "wmic", "regsvr32", "rundll32", "mshta",
            "certutil", "bitsadmin", "wscript", "cscript"
        }
        
        $memory_techniques = {
            "reflective dll", "process hollowing", "dll injection",
            "process injection", "atom bombing"
        }
    
    condition:
        2 of ($fileless_indicators) or 1 of ($memory_techniques)
}

// Rule for detecting APT (Advanced Persistent Threat) indicators
rule APT_Indicators {
    meta:
        description = "APT indicators detection rule"
        author = "G3ICAP Team"
        priority = 9
        threat_level = "critical"
        category = "apt"
    
    strings:
        $apt_strings = {
            "advanced persistent threat", "apt", "nation state",
            "cyber espionage", "zero day", "0day"
        }
        
        $apt_tools = {
            "mimikatz", "bloodhound", "empire", "cobalt strike",
            "metasploit", "powershell empire"
        }
    
    condition:
        1 of ($apt_strings) or 1 of ($apt_tools)
}

// Rule for detecting suspicious network activity
rule Network_Suspicious {
    meta:
        description = "Suspicious network activity detection"
        author = "G3ICAP Team"
        priority = 4
        threat_level = "low"
        category = "network"
    
    strings:
        $suspicious_ports = {
            "4444", "5555", "6666", "7777", "8888",
            "9999", "31337", "12345", "54321"
        }
        
        $suspicious_protocols = {
            "tor", "i2p", "freenet", "gnunet"
        }
    
    condition:
        1 of ($suspicious_ports) or 1 of ($suspicious_protocols)
}

// Rule for detecting data exfiltration
rule Data_Exfiltration {
    meta:
        description = "Data exfiltration detection rule"
        author = "G3ICAP Team"
        priority = 7
        threat_level = "high"
        category = "exfiltration"
    
    strings:
        $exfiltration_strings = {
            "exfiltrate", "data theft", "sensitive data",
            "confidential", "classified", "proprietary"
        }
        
        $exfiltration_methods = {
            "ftp", "sftp", "scp", "rsync", "curl", "wget"
        }
    
    condition:
        2 of ($exfiltration_strings) or 2 of ($exfiltration_methods)
}

// Rule for detecting social engineering
rule Social_Engineering {
    meta:
        description = "Social engineering detection rule"
        author = "G3ICAP Team"
        priority = 6
        threat_level = "medium"
        category = "social_engineering"
    
    strings:
        $social_engineering_strings = {
            "urgent", "immediate action", "verify now",
            "account suspended", "security breach",
            "click here to verify", "confirm your identity"
        }
        
        $urgency_indicators = {
            "asap", "urgent", "immediately", "right now",
            "expires soon", "limited time"
        }
    
    condition:
        2 of ($social_engineering_strings) or 2 of ($urgency_indicators)
}
